package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println(s);
    }

:}

action code
{://Codigo_de_acciones:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER,IGUAL,DIFERENTE,MAYOR,MENOR,MAYOR_IGUAL,MENOR_IGUAL,AND,OR,NOT;
nonterminal NodoC3D inicial, logic,relac,aritm;


precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL,DIFERENTE,MAYOR,MENOR,MAYOR_IGUAL,MENOR_IGUAL;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 


start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} logic:exp 
                    {: 
						RESULT = exp;
                        ControlC3D.agregarC3D(exp.getCad());
						ControlC3D.agregarC3D("Falsa: "+exp.getFalso());
						ControlC3D.agregarC3D("\nVerdadera: "+exp.getVerdadero());
                    :};

logic ::= logic:izq OR logic:der
                    {: 
                        String izq_etiq1 = izq.getVerdadero();//V1
                        String izq_etiq2 = izq.getFalso();//F1						
                        String der_etiq1 = der.getVerdadero();//V2
                        String der_etiq2 = der.getFalso();//F2		
                        
                        String c3d = izq.getCad()+"\n";
                        c3d+= izq_etiq2+":\n";
                        c3d+= der.getCad()+"\n";
                        String str_v=izq_etiq1+","+der_etiq1;
                        String str_f=der_etiq2;
                        RESULT = new NodoC3D(c3d,str_v,str_f);
                    :}
			|   logic:izq AND logic:der
                    {: 
						String izq_etiq1 = izq.getVerdadero();//V1
                        String izq_etiq2 = izq.getFalso();//F1						
                        String der_etiq1 = der.getVerdadero();//V2
                        String der_etiq2 = der.getFalso();//F2		
                        
                        String c3d = izq.getCad()+"\n";
                        c3d+= izq_etiq1+":\n";
                        c3d+= der.getCad()+"\n";
                        String str_v=der_etiq1;
                        String str_f=izq_etiq2+","+der_etiq2;
                        RESULT = new NodoC3D(c3d,str_v,str_f);
                        
                        /*String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " && \n" + der.getCad() + "\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp);*/
                    :}
			|   NOT logic:exp 
                    {: 
                        RESULT = new NodoC3D(exp.getCad(),exp.getFalso(),exp.getVerdadero());  
                    :}
			| relac:a {:
				RESULT=a;
			:};

relac::= 	aritm:izq IGUAL aritm:der
                    {: 
						String etiq1 = ControlC3D.generaEtiq();
						String etiq2 = ControlC3D.generaEtiq();
						String c3d = "if "+izq.getCad() +" == " +der.getCad() + " goto "+ etiq1 +"\n     goto "+ etiq2+"\n";
						RESULT= new NodoC3D(c3d,etiq1,etiq2);
                        /*String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " == " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp);*/ 
                    :}
			|   aritm:izq DIFERENTE aritm:der
                    {: 
						String etiq1 = ControlC3D.generaEtiq();
						String etiq2 = ControlC3D.generaEtiq();
						String c3d = "if "+izq.getCad() +" != " +der.getCad() + " goto "+ etiq1 +"\n     goto "+ etiq2+"\n";
						RESULT= new NodoC3D(c3d,etiq1,etiq2);
                    :}
			|   aritm:izq MAYOR aritm:der
                    {: 
						String etiq1 = ControlC3D.generaEtiq();
						String etiq2 = ControlC3D.generaEtiq();
						String c3d = "if "+izq.getCad() +" > " +der.getCad() + " goto "+ etiq1 +"\n     goto "+ etiq2+"\n";
						RESULT= new NodoC3D(c3d,etiq1,etiq2);
                    :}
			|   aritm:izq MENOR aritm:der
                    {: 
						String etiq1 = ControlC3D.generaEtiq();
						String etiq2 = ControlC3D.generaEtiq();
						String c3d = "if "+izq.getCad() +" < " +der.getCad() + " goto "+ etiq1 +"\n     goto "+ etiq2+"\n";
						RESULT= new NodoC3D(c3d,etiq1,etiq2);
                    :}
			|   aritm:izq MAYOR_IGUAL aritm:der
                    {: 
						String etiq1 = ControlC3D.generaEtiq();
						String etiq2 = ControlC3D.generaEtiq();
						String c3d = "if "+izq.getCad() +" >= " +der.getCad() + " goto "+ etiq1 +"\n     goto "+ etiq2+"\n";
						RESULT= new NodoC3D(c3d,etiq1,etiq2);
                    :}
			|   aritm:izq MENOR_IGUAL aritm:der
                    {: 
						String etiq1 = ControlC3D.generaEtiq();
						String etiq2 = ControlC3D.generaEtiq();
						String c3d = "if "+izq.getCad() +" <= " +der.getCad() + " goto "+ etiq1 +"\n     goto "+ etiq2+"\n";
						RESULT= new NodoC3D(c3d,etiq1,etiq2);
                    :}     		
			| aritm:a {:
				RESULT=a;
			:};


					
aritm   ::= aritm:izq MAS aritm:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   aritm:izq MENOS aritm:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   aritm:izq MULT aritm:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   aritm:izq DIV aritm:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   aritm:izq POT aritm:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
			
            |   MENOS aritm:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ logic:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;